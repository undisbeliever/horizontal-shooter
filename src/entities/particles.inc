// This file is part of Horizontal Shooter.
// Copyright (c) 2016 - 2017, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License: https://opensource.org/licenses/MIT

namespace Entities {
namespace Particles {

buildFunctionTable(BaseEntityFunctionTable, Particles)
Entity.useDefaultRenderer()

// IN: A = parameter (address entity)
//    MetaSprite.ActionPoint.address - address of actionPoint that spawned the missile
a16()
i16()
code()
function Init {
    lda.w   #MSEO.Particle.Animations.Animation
    jmp     MetaSprite.SetAnimation
}

a16()
i16()
code()
function Destructor {
    rts
}


a16()
i16()
code()
function Process {
    // Delete entity if animation.id == 0xff

    sep     #$20
a8()
    lda.b   BaseEntity.MetaSprite.Animation.id
    inc
    bne     +
        ldy.w   #Entity.lists.toDelete
        sty.w   Entity.changeList
    +

    rep     #$30
a16()
    rts
}


// No Collisions
a16()
i16()
code()
BlockWithShield:
TakeDamageFromEntity:
CollideWithBody:
CollideWithShield:
function CalculateAttackValue {
    rts
}


inline _entity(name, frameSetId, palette) {
    namespace {name} {
        rodata(EN_RomData)
        RomData:
            dw  FunctionTable
            db  Entity.ListId.PARTICLE  // initial List
            dw  MSFS.{frameSetId}       // frameSetId
            db  {palette}               // defaultPalette


        rodata(EN_EntityList)
        constant ENTITY_ID = (pc() - Entity.Data.EntityList) / 2
            dw  RomData
    }
}
_entity(Explosion, Explosion, 0)

}
}

// vim: ft=bass-65816 ts=4 sw=4 et:

