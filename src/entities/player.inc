
scope Entities {
scope PlayerEntity {

// Friction
// (0:0:15 fixed point)
constant FRICTION(0x6666)

// Player Acceleration
// (0:0:15 fixed point)
constant X_ACCEL(FRICTION + 0x1234)
constant Y_ACCEL(FRICTION + 0x3456)

// Max Player Velocity
// (0:7:7 fixed point)
constant MAX_X_VECL(0x0140)
constant MAX_Y_VECL(0x0200)


buildFunctionTable(BaseEntityFunctionTable, PlayerEntity)
Entities.useDefaultRenderer()

scope EntityStruct: {
    childstruct(BaseEntity)
    endstruct()
}

// IN: A = parameter (frameDelay)
a16()
i16()
code()
scope Init: {
    lda.w   #MSEO.Player.Animations.Straight
    jsr     MetaSprite.SetAnimation

    rts
}

a16()
i16()
code()
scope Destructor: {
    rts
}


a16()
i16()
code()
scope Process: {

    macro _AddAcceleration(c, accel, maxVecl) {
        scope {#} {
            lda.b   EntityStruct.{c}Vecl.hw
            bmi     Minus
                cmp.w   #{maxVecl}
                bcs     End

        Minus:
            lda.b   EntityStruct.{c}Vecl
            clc
            adc.w   #{accel}
            sta.b   EntityStruct.{c}Vecl
            bcc     End
                sep     #$20
                inc.b   EntityStruct.{c}Vecl + 2
                rep     #$20
        End:
        }
    }

    macro _SubAcceleration(c, accel, maxVecl) {
        scope {#} {
            lda.b   EntityStruct.{c}Vecl.hw
            bpl     Positive
                cmp.w   #-{maxVecl}
                bcc     End

        Positive:
            lda.b   EntityStruct.{c}Vecl
            sec
            sbc.w   #{accel}
            sta.b   EntityStruct.{c}Vecl
            bcs     End
                sep     #$20
                dec.b   EntityStruct.{c}Vecl + 2
                rep     #$20
        End:
        }
    }

    scope UpdateYVecl {
        lda.l   JOY1
        bit.w   #JOY.up
        beq     ElseTestDown
            // Up pressed
            lda.w   #MSEO.Player.Animations.Up
            jsr     MetaSprite.SetAnimation

            _SubAcceleration(y, Y_ACCEL, MAX_Y_VECL)

            bra     EndIf

    ElseTestDown:
        bit.w   #JOY.down
        beq     Else
            // Down pressed

            lda.w   #MSEO.Player.Animations.Down
            jsr     MetaSprite.SetAnimation

            _AddAcceleration(y, Y_ACCEL, MAX_Y_VECL)

            bra     EndIf
    Else:
        // Up/Down not pressed

        lda.w   #MSEO.Player.Animations.Straight
        jsr     MetaSprite.SetAnimation

    EndIf:
    }

    scope UpdateXVecl {
        lda.l   JOY1
        bit.w   #JOY.left
        beq     ElseTestRight
            // Left pressed

            _SubAcceleration(x, X_ACCEL, MAX_X_VECL)

            bra     EndIf

    ElseTestRight:
        bit.w   #JOY.right
        beq     EndIf
            // Right pressed

            _AddAcceleration(x, X_ACCEL, MAX_X_VECL)

            bra     EndIf

    EndIf:
    }

    macro _handleFriction(c) {
        scope Friction_{c} {
            lda.b   EntityStruct.{c}Vecl.hw
            bmi     Minus
                // Positive Velocity
                // subtract friction

                sec
                lda.b   EntityStruct.{c}Vecl
                sbc.w   #FRICTION
                tay

                sep     #$20
            a8()
                lda.b   EntityStruct.{c}Vecl + 2
                sbc.b   #0
                bpl     +
                    lda.b   #0
                    ldy.w   #0
            +
                sty.b   EntityStruct.{c}Vecl
                sta.b   EntityStruct.{c}Vecl + 2

                bra     End

        Minus:
                // Negative velocity
                // add friction

                clc
                lda.b   EntityStruct.{c}Vecl
                adc.w   #FRICTION
                tay

                sep     #$20
            a8()
                lda.b   EntityStruct.{c}Vecl + 2
                adc.b   #0
                bmi     +
                    lda.b   #0
                    ldy.w   #0
            +
                sty.b   EntityStruct.{c}Vecl
                sta.b   EntityStruct.{c}Vecl + 2

        End:
            rep     #$20
        a16()
        }
    }
    _handleFriction(x)
    _handleFriction(y)

    macro _addVelocity(c) {
        clc
        lda.b   EntityStruct.{c}Vecl
        adc.b   EntityStruct.{c}Pos
        sta.b   EntityStruct.{c}Pos

        lda.b   EntityStruct.{c}Vecl + 1
        xba
        bpl     +
            ora     #$ff00
            bra     ++
        +
            and     #$00ff
        +
        adc.b   EntityStruct.{c}Pos + 2
        sta.b   EntityStruct.{c}Pos + 2
    }
    _addVelocity(x)
    _addVelocity(y)

    rts
}


rodata(EN_RomData)
scope RomData: {
    dw  FunctionTable
    db  0               // initial List (player) ::TODO name these lists::
    dw  MSFS.Player     // frameSetId
    db  0               // defaultPalette
}

rodata(EN_RomDataList)
constant ENTITY_ID((pc() - Entities.Data.List) / 2)
    dw  RomData
}
}

// vim: ft=asm ts=4 sw=4 et:

